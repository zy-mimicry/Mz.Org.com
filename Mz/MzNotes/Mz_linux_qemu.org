#+TITLE: Linux QEMU
#+DATE: <2018-02-08 四>

** 使用qemu搭建linux驱动开发环境

*** 搭建使用的原料
    
**** ubuntu套件

     : 目前使用14.04就可以完成,高版本也是可以的,不建议老版本尝试.
     
**** arm的交叉编译工具链

     : 交叉编译,不用多说

     安装方法:
     sudo apt-get install gcc-arm-linux-gnueabi

**** QEMU模拟器

     : 使用新版本的qemu套件,这里是固定版本,如果喜欢的话,研究下qemu,然后弄最新的!
     : qemu模拟得最好的arm芯片，要数ARM公司的vexpress A9开发板了!

     下载方法:
     wget http://wiki.qemu-project.org/download/qemu-2.0.2.tar.bz2 (固定版本,验证可用)
     
     : QEMU依赖
     #+BEGIN_EXAMPLE
      配置qemu前，需要安装几个软件包：
      sudo apt-get install zlib1g-dev
      sudo apt-get install libglib2.0-0
      sudo apt-get install libglib2.0-dev 
     #+END_EXAMPLE

**** Linux内核版本
     
     : 使用的内核版本是3.16,测试通过
     
     下载内核代码的方法:
     1. wget https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.16.tar.xz (固定版本)
     2. git clonegit://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git (还没有尝试过)

     : 内核的编译环境就不用说了,如果不会的话,干这个就没有意义.

**** Busybox

     : 使用最新的busybox也是极好的,这里却使用了固定版本的busybox

     下载方法:
     wget http://www.busybox.net/downloads/busybox-1.20.2.tar.bz2 (固定版本,验证可用)

**** u-boot

     : 使用u-boot-2017.01.tar.bz2这个版本完成下载
     
     下载的位置:
     http://ftp.denx.de/pub/u-boot/ (当然这个是可以替换的,如果喜欢使用最新的也是可以的)

*** 搭建步骤

    : 当然了,这里的搭建步骤就是主要配置和编译,到最后的运行.

**** 编译内核
     
     : 编译linux内核提供两种差不多的方式,第二种比较简单,也可以集成到一个脚本中

     生成vexpress开发板子的config文件
     #+BEGIN_EXAMPLE
     配置:
     make CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm vexpress_defconfig
     编译:
     make CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm
     产物:
     arch/arm/boot/zImage
     #+END_EXAMPLE

     也可以这样:
     #+BEGIN_EXAMPLE
      export ARCH=arm 
      export CROSS_COMPILE=arm-linux-gnueabi-
      make vexpress_defconfig
      make zImage
      make modules
      make dtbs
      编译后生成 在 arch/arm/boot 目录下生成 zImage 文件，则说明编译成功
     #+END_EXAMPLE

     
**** 编译安装QEMU
     
     : 依赖前面已经提到,这里写编译步骤
     
     方法:
     #+BEGIN_EXAMPLE
     ./configure --target-list=arm-softmmu --audio-drv-list=
     make
     make install
     #+END_EXAMPLE

     测试方法:(这个当然起不来系统,只是用来测试而已)
     #+BEGIN_EXAMPLE
     qemu-system-arm -M vexpress-a9 -m 512M -kernel /home/ivan/kernel_git/linux/arch/arm/boot/zImage -nographic -append "console=ttyAMA0"
     #+END_EXAMPLE
     
     Note:
     #+BEGIN_EXAMPLE
     这里简单介绍下qemu命令的参数：

    -M vexpress-a9 模拟vexpress-a9单板，你可以使用-M ?参数来获取该qemu版本支持的所有单板

    -m 512M 单板运行物理内存512M

    -kernel /home/ivan/kernel_git/linux/arch/arm/boot/zImage  告诉qemu单板运行内核镜像路径

    -nographic 不使用图形化界面，只使用串口

    -append "console=ttyAMA0" 内核启动参数，这里告诉内核vexpress单板运行，串口设备是哪个tty。 

    注意：
    我每次搭建，都忘了内核启动参数中的console=参数应该填上哪个tty，因为不同单板串口驱动类型不尽相同，创建的tty设备名当然也是不相同的。那vexpress单板的tty设备名是哪个呢？ 其实这个值可以从生成的.config文件CONFIG_CONSOLE宏找到。
    如果搭建其它单板，需要注意内核启动参数的console=参数值，同样地，可从生成的.config文件中找到。 
     #+END_EXAMPLE
     

**** 编译和安装busybox

     : 注意编译出来的busybox是给板子用的,要加宏!

     安装步骤:
     #+BEGIN_EXAMPLE
     make defconfig
     make CROSS_COMPILE=arm-linux-gnueabi-
     make install CROSS_COMPILE=arm-linux-gnueabi- (这个宏很重要)
     #+END_EXAMPLE

**** 制作根文件系统

     : 这个是必备的,内核有了,还是要有跟文件系统,如何内核找不到根文件系统,就无法启动init的进程!

     摘录一些内容:
     #+BEGIN_EXAMPLE
     1. 根文件系统的内容
     如果你看过《Linux From Scratch》，相信你会对这一步产生恐惧感，但如果一直从事嵌入式开发，就可以放下心来。
     根文件系统就是简单得不能再简单的几个命令集和动态库而已。
     为什么Linux From Scratch会有那么复杂，是因为它要制作出一个Linux发生版。但在嵌入式领域，几乎所有的东西，都是mini版本，根文件系统也不例外。

     本文制本的根文件系统 = busybox(包含基础的Linux命令)  + 运行库 + 几个字符设备
     #+END_EXAMPLE

     #+BEGIN_EXAMPLE
     2. 根文件系统放在哪里
     其实依赖于每个开发板支持的存储设备，可以放到Nor Flash上，也可以放到SD卡，甚至外部磁盘上。最关键的一点是你要清楚知道开发板有什么存储设备.
     本文直接使用SD卡做为存储空间，文件格式为ext3格式 
     #+END_EXAMPLE

     : 下面操作的sudo是必要的,毕竟用户需要是root才可以!
     形成根目录结构:
     #+BEGIN_EXAMPLE
      先在Ubuntu主机环境下，形成目录结构，里面存放的文件和目录与单板上运行所需要的目录结构完全一样，然后再打包成镜像（在开发板看来就是SD卡），这个临时的目录结构称为根目录
      1.  创建rootfs目录（根目录），根文件系统内的文件全部放到这里
      sudo mkdir -p rootfs/{dev,etc/init.d,lib}

      2. 拷贝busybox命令到根目录下
      sudo cp busybox-1.20.2/_install/* -r rootfs/

      3. 从工具链中拷贝运行库到lib目录下
      sudo cp -P /usr/arm-linux-gnueabi/lib/* rootfs/lib/

      4. 创建4个tty端终设备
      sudo mknod rootfs/dev/tty1 c 4 1
      sudo mknod rootfs/dev/tty2 c 4 2
      sudo mknod rootfs/dev/tty3 c 4 3
      sudo mknod rootfs/dev/tty4 c 4 4
     #+END_EXAMPLE

     制作根文件系统镜像
     #+BEGIN_EXAMPLE
      1. 生成32M大小的镜像 
      dd if=/dev/zero of=a9rootfs.ext3 bs=1M count=32

      2. 格式化成ext3文件系统
      mkfs.ext3 a9rootfs.ext3
     #+END_EXAMPLE

     Note:
     制作磁盘镜像的方法这里再提供一种:
     qemu-img create -f raw vexpress.img 100M
     目的就是生成一个vexpress.img的虚拟镜像文件，为了更好的兼容性选择 raw 格式的镜像。

     将文件拷贝到镜像中
     #+BEGIN_EXAMPLE
      sudo mkdir tmpfs
      sudo mount -t ext3 a9rootfs.ext3 tmpfs/ -o loop
      sudo cp -r rootfs/*  tmpfs/
      sudo umount tmpfs
     #+END_EXAMPLE

     这里还是提供一个链接比较好:\\
     http://blog.csdn.net/aggresss/article/details/54946438\\
     这篇文章中介绍的内容,可以满足建立基础的跟文件系统


**** 编译安装u-boot

     : 这里提供一个例子
     
     解压完成压缩包后

     编译命令指令流程:
     #+BEGIN_EXAMPLE
     export ARCH=arm 
     export CROSS_COMPILE=arm-linux-gnueabi-
     make vexpress_ca9x4_defconfig
     make
     编译完成后，如果目录下生成 u-boot 文件，则说明编译成功
     #+END_EXAMPLE

     简单的验证:(能启动就OK)
     #+BEGIN_EXAMPLE
     qemu-system-arm \
     -M vexpress-a9 \
     -nographic \
     -m 512M \
     -kernel u-boot
     #+END_EXAMPLE

**** 系统启动运行

     : 这里是个例子,可以自己以后扩展调试

     #+BEGIN_EXAMPLE
     qemu-system-arm -M vexpress-a9 -m 512M -kernel /path/to/kernel/dir/arch/arm/boot/zImage -dtb  /path/to/kernel/dir/arch/arm/boot/dts/vexpress-v2p-ca9.dtb -nographic -append "root=/dev/mmcblk0  console=ttyAMA0" -sd a9rootfs.ext3
     #+END_EXAMPLE

**** 使用NFS文件系统共享文件(验证过,并且可行!)
     
     :这部分的内容验证过,并且可行,而且可以有效的提高开发效率.
     
     http://blog.csdn.net/aggresss/article/details/54948143 (参考文档) \\

     采用tap的方式使虚拟机和主机通讯.

     当虚拟机只需要与主机通讯,并不需要与外界网络通讯的时候,不需要建立网桥,创建一个tap就可以了.
     
     Note:摘录
     #+BEGIN_EXAMPLE
       这里说一下Linux中tun/tap。
       tun/tap 驱动程序实现了虚拟网卡的功能，tun表示虚拟的是点对点设备，tap表示虚拟的是以太网设备，这两种设备针对网络包实施不同的封装。
       利用tun/tap 驱动，可以将tcp/ip协议栈处理好的网络分包传给任何一个使用tun/tap驱动的进程，由进程重新处理后再发到物理链路中。
     #+END_EXAMPLE

     Note: 也许主机并没有在内核中打开对虚拟网卡的支持,我们可能需要使用下面的方法自己添加,但是目前来看都是内置到内核中,不是以模块的方式存在的.

     验证主机是否支持tun/tap,可以直接查看/dev/net/tun, 网上的内容都太老了,现在的tun/tap已经不是以模块的方式使用了,而是集成在镜像中了.

     需要注意的一些内容:
     1. 可能需要root权限来执行qemu,只是因为我们虚拟的网卡使用的用户是root,可以调整.
     2. 如果配置网络的过程中发现不能ping通网络,肯定是自己的问题,首先了解自己的操作系统的防火墙,需要对被访问的网络可见.而且多配置几次就知道了.
     3. 配置的时候需要认真一些,因为可能一点失误就很难得到顺利的结果,如命令行参数出错等.

**** 使用NFS文件系统作为根文件系统(这个是开发的改进,很重要,可惜并不好使,但是也做个笔记用来对比.)

     : 如果自定义的话,每次都需要重新更新根文件系统!
     
     摘录内容:
     #+BEGIN_EXAMPLE
      nfsroot:

      + kernel client:

      1. enable nfs client support 

          - CONFIG_NFS_FS
          - CONFIG_NFS_V3
          - CONFIG_NFS_V4
          - CONFIG_ROOT_NFS

      2. enable kernel ip auto configure 

          IP: kernel level autoconfiguration
          - CONFIG_IP_PNP
          - CONFIG_IP_PNP_DHCP

      3. set kernel cmdline 
      CONFIG_CMDLINE="console=ttyFIQ0 androidboot.console=ttyFIQ0 init=/sbin/init root=/dev/nfs nfsroot=192.168.11.197:/usr/src/nfsroot,v3,tcp nfsrootdebug ip=dhcp"
      
      + server:

      1. install nfs-utils 
         - sudo apt-get install nfs-kernel-server

      2. export path 

      add

      /usr/src/nfsroot	*(rw,no_root_squash,no_subtree_check)

      to '/etc/exports'

      3. start nfsd 

      /etc/init.d/nfs start
     
     #+END_EXAMPLE

     测试NFS是否成功的方法:
     1. sudo mount -t nfs localhost:/path/to/nfs_rootfs /mnt (尝试挂载)
     2. showmount -e (查看分配的NFS文件目录)
     
     常见错误:
     #+BEGIN_EXAMPLE
     yang.zheng@U-yang:~/mzlinux/linux-4.4.95$ /etc/init.d/nfs-kernel-server start
      mount: only root can do that
       * Exporting directories for NFS kernel daemon...                                                                                                              exportfs: Failed to stat /data/nishome/td/yang.zheng/mzlinux/nfs_rootfs: No such file or directory
      exportfs: could not open /var/lib/nfs/.etab.lock for locking: errno 13 (Permission denied)
      exportfs: can't lock /var/lib/nfs/etab for writing
      exportfs: could not open /var/lib/nfs/.xtab.lock for locking: errno 13 (Permission denied)
      exportfs: can't lock /var/lib/nfs/xtab for writing
                                                                                                                                                              [ OK ]
       * Starting NFS kernel daemon                                                                                                                                  rpc.nfsd: Unable to access /proc/fs/nfsd errno 2 (No such file or directory).
      Please try, as root, 'mount -t nfsd nfsd /proc/fs/nfsd' and then restart rpc.nfsd to correct the problem
     #+END_EXAMPLE
     解决方案:
     mount -t nfsd nfsd /proc/fs/nfsd
     
     手动挂载proc,sysfs文件系统:\\
     http://blog.csdn.net/liuwei000000/article/details/23050213

     只读文件系统的问题: Read-only file system
     解决方案:\\
    http://blog.csdn.net/u010839779/article/details/77062347\\

     cmd: mount -o remount rw /

** 使用新版本内核

   : 目前已经测试成功

*** 目前使用的工具和内核的版本

    主要内容:
    1. linux内核版本: 4.4.95
    2. busybox版本: busybox-1.27.1
    3. QEMU版本: qemu-2.11.0
    4. 交叉编译工具链: ubuntu-14.04 包库中的 arm-linux-gnueabi
    5. u-boot版本: u-boot-2017.01.tar.bz2

** QEMU

*** Q:如何退出qemu虚拟程序?

    A: 方法.. Ctrl-A + x


** 自主构建嵌入式根文件系统

   根据名著<构建嵌入式linux系统>,写一个自己的操作实践笔记.
   Jump to : file:./Mz_linux_mini_rootfs.org

** 好文档链接

   搭建环境文档\\
   http://blog.csdn.net/linyt/article/details/42504975 (以这个为主!)\\
   http://www.linuxidc.com/Linux/2015-07/119764.htm \\

   linuxrc无法使用的分析\\
   http://blog.csdn.net/charliewangg12/article/details/42030235 \\
   : 一般时候都是因为busybox的编译方法不对导致的,需要添加交叉编译的宏才可以!

   busybox编译报错,缺少头文件<sys/resource.h> ,放到libbb.h中\\
   http://www.mamicode.com/info-detail-1597117.html\\

   QEMU官网下载地址:\\
   https://www.qemu.org/download/\\

   linux内核版本下载地址:\\
   https://www.kernel.org/pub/linux/kernel/\\

   软件开发程序员博客文章收藏网:\\
   http://www.programgo.com/\\

   QEMU模拟vexpress开发板的资料:\\
   http://blog.csdn.net/aggresss/article/details/54942848 \\

   这个人可以参考他的文档,有些意思:(主要就是开发板)\\
   https://github.com/aggresss/LKDemo \\
   http://blog.csdn.net/aggresss/article/details/74834155 \\

   QEMU官网:\\
   https://www.qemu.org/\\

   LFS抓系统官网:\\
   http://www.linuxfromscratch.org/ \\

   linux kernel 命令行参数 rootwait 的分析:\\
   http://blog.csdn.net/tiantao2012/article/details/53036828\\

