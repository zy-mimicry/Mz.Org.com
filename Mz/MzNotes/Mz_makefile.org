#+TITLE:Mz系列Makefile
#+STARTUP: noindent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../template/org.style.css"/>

* Mz系列Makefile

** 引用网上的万能Makefile(应用类)

   #+BEGIN_SRC makefile
####################################################
# Generic makefile - awesome Makefile
# for compiling and linking C++ projects on Linux 
# Author: George Foot  Modified:Jackie Lee
####################################################
### Customising
#
# Adjust the following if necessary; EXECUTABLE is the target
# executable's filename, and LIBS is a list of libraries to link in
# (e.g. alleg, stdcx, iostr, etc). You can override these on make's
# command line of course, if you prefer to do it that way.
#
#
EXECUTABLE := main    # 可执行文件名
LIBDIR:=              # 静态库目录
LIBS :=               # 静态库文件名
INCLUDES:=.           # 头文件目录
SRCDIR:=              # 除了当前目录外，其他的源代码文件目录
#
# # Now alter any implicit rules' variables if you like, e.g.:

CC:=g++
CFLAGS := -g -Wall -O3
CPPFLAGS := $(CFLAGS)
CPPFLAGS += $(addprefix -I,$(INCLUDES))
CPPFLAGS += -MMD
#
# # The next bit checks to see whether rm is in your djgpp bin
# # directory; if not it uses del instead, but this can cause (harmless)
# # `File not found' error messages. If you are not using DOS at all,
# # set the variable to something which will unquestioningly remove
# # files.
#

RM-F := rm -f


# # You shouldn't need to change anything below this point.
#
SRCS := $(wildcard *.cpp) $(wildcard $(addsuffix /*.cpp, $(SRCDIR)))
OBJS := $(patsubst %.cpp,%.o,$(SRCS))
DEPS := $(patsubst %.o,%.d,$(OBJS))
MISSING_DEPS := $(filter-out $(wildcard $(DEPS)),$(DEPS))
MISSING_DEPS_SOURCES := $(wildcard $(patsubst %.d,%.cpp,$(MISSING_DEPS)))


.PHONY : all deps objs clean veryclean rebuild info

all: $(EXECUTABLE)

deps : $(DEPS)

objs : $(OBJS)

clean :
        @$(RM-F) *.o
        @$(RM-F) *.d
veryclean: clean
        @$(RM-F) $(EXECUTABLE)

rebuild: veryclean all
ifneq ($(MISSING_DEPS),)
$(MISSING_DEPS) :
        @$(RM-F) $(patsubst %.d,%.o,$@)
endif
-include $(DEPS)
$(EXECUTABLE) : $(OBJS)
        $(CC) -o $(EXECUTABLE) $(OBJS) $(addprefix -L,$(LIBDIR)) $(addprefix -l,$(LIBS))

info:
        @echo $(SRCS)
        @echo $(OBJS)
        @echo $(DEPS)
        @echo $(MISSING_DEPS)
        @echo $(MISSING_DEPS_SOURCES)
   #+END_SRC

-----

** Makefile常用函数

*** subst

    #+BEGIN_EXAMPLE
    $(subst <from>,<to>,<text>)

    名称:字符串替换函数——subst。
    功能:把字串<text>中的<from>字符串替换成<to>。
    返回:函数返回被替换过后的字符串。
    #+END_EXAMPLE

    #+BEGIN_VERSE
    示例:
    $(patsubst %.c,%.o,x.c.c bar.c)
    把字串“x.c.c bar.c”符合模式[%.c]的单词替换成[%.o],返回结果是“x.c.o bar.o”
    备注:
    这和我们前面“变量章节”说过的相关知识有点相似。
    如:
    “$(var:<pattern>=<replacement>)”
    相当于
    “$(patsubst <pattern>,<replacement>,$(var))”,
    而“$(var: <suffix>=<replacement>)” 则相当于
    “$(patsubst %<suffix>,%<replacement>,$(var))”。
    例如有:objects = foo.o bar.o baz.o,
    那么,“$(objects:.o=.c)”和“$(patsubst %.o,%.c,$(objects))”是一样的。
    #+END_VERSE

-----

*** patsubst

    #+BEGIN_EXAMPLE
    $(patsubst <pattern>,<replacement>,<text>)

    名称:模式字符串替换函数——patsubst。
    功能:查找<text>中的单词(单词以“空格”、“Tab”或“回车”“换行”分隔)是否符
    合模式<pattern>,如果匹配的话,则以<replacement>替换。这里,<pattern>可以包括通
    配符“%”,表示任意长度的字串。如果<replacement>中也包含“%”,那么,<replacement>
    中的这个“%”将是<pattern>中的那个“%”所代表的字串。
    (可以用“\”来转义,以“\%”
    来表示真实含义的“%”字符)
    返回:函数返回被替换过后的字符串。
    #+END_EXAMPLE
    
    #+BEGIN_VERSE
    示例:
    $(patsubst %.c,%.o,x.c.c bar.c)
    把字串“x.c.c bar.c”符合模式[%.c]的单词替换成[%.o],返回结果是“x.c.o bar.o”
    备注:
    这和我们前面“变量章节”说过的相关知识有点相似。
    如:
    “$(var:<pattern>=<replacement>)”
    相当于
    “$(patsubst <pattern>,<replacement>,$(var))”,
    而“$(var: <suffix>=<replacement>)” 则相当于
    “$(patsubst %<suffix>,%<replacement>,$(var))”。
    例如有:objects = foo.o bar.o baz.o,
    那么,“$(objects:.o=.c)”和“$(patsubst %.o,%.c,$(objects))”是一样的。#+BEGIN_VERSE
    #+END_VERSE

-----

*** strip

    #+BEGIN_EXAMPLE
    $(strip <string>)
    名称:去空格函数——strip。
    功能:去掉<string>字串中开头和结尾的空字符。
    返回:返回被去掉空格的字符串值。
    #+END_EXAMPLE

    #+BEGIN_VERSE
    示例:
    $(strip a b c )
    把字串“a b c ”去到开头和结尾的空格,结果是“a b c”。
    #+END_VERSE

-----

*** findstring

    #+BEGIN_EXAMPLE
    $(findstring <find>,<in>)
    名称:查找字符串函数——findstring。
    功能:在字串<in>中查找<find>字串。
    返回:如果找到,那么返回<find>,否则返回空字符串。
    #+END_EXAMPLE

    #+BEGIN_VERSE
    示例:
    $(findstring a,a b c)
    $(findstring a,b c)
    第一个函数返回“a”字符串,第二个返回“”字符串(空字符串)
    #+END_VERSE

-----

** Makefile中特殊符号的解析
   
   - $^ :: 所有依赖列表
	 - $< :: 依赖列表第一个值
	 - $@ :: 目标列表

    
    
