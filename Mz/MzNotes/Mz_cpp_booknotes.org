#+TITLE: CPP Programming
#+DATE:<2018-01-11 四> 

* Cpp推荐书籍

** 欲读书籍
   
*** Accelerated C++ 中文版
    : 这本书很经典,可是不适合新手读,有一些编程经验的读者会收获很多
*** The C++ Programming Language
    : 这本书是C++作者的经典作品,做好看包括C++11的版本
*** Generic Programming and the STL
    : 这本书是讲解C++模板库的经典
*** Ruminations On C++
    : 这个是Accelerated C++的作者另一个经典作品,有设计模式和方法论

* 读后反思

** Accelerated C++ 中文版

   书目网站 这个好像是这本书的第二版
   : Jump to -> http://www.informit.com/store/accelerated-c-plus-plus-practical-programming-by-example-9780201703535

*** 书的思想
    
    这本书集中注意力来解决问题,而不是专门探究语言和库的特征;当然,书中也会解释,不过目的是为程序提供支持,而不是用程序来作为演示语言特征的工具.
    
    忽略细节的能力是成熟技术的特征,这也是抽象的概念,就是选择性的忽略.

    编写一个成功程序的关键在于是否清楚问题的那些部分给予考虑,那些部分应该忽略.

    使用抽象是一个不错的选择,并且每种语言都会提供抽象的工具,程序员的目的就是如何更好的使用这些抽象的工具.

    这本书可以为C++的学习打下坚实的基础,无论在哪里都可以用到.

    #+BEGIN_QUOTE
    在业余的望远镜制造者群体中流传着这样一种说法,就是先制造一个3英寸的镜片然后造出6英寸的镜片比从头开始制造一个6英寸的镜片更容易.
    #+END_QUOTE
    
    #+BEGIN_QUOTE
    我们无需成为机械工程师就可以驾驶汽车,同样的道理,我们在使用C++之前也无需了解关于C++运作的所有细节.
    #+END_QUOTE

*** 书的内容

**** 第一部分 使用标准库抽象的程序

***** 开始学习C++
      
      这个章节主要介绍的内容:
      1. 表达式 .. 让编译其对某些内容做运算,并且产生一个结果,可能产生副作用.
      2. 类型 .. 每个操作数都有自己的类型,直接量也有类型.
      3. 副作用 .. 就是表达式在计算过程中对程序或者系统环境产生的影响.
      4. 作用域 .. 对数据而言作用域就是使用范围
      5. 命名空间 .. 把相关名称聚集在一起的技术,防止名字重复带来的影响.
      6. 字符串直接量 .. "hello world"
      7. 主函数 .. 必须有主函数,因为我们没有写操作操作系统,而程序要有系统的加载入口,就是这里.
      8. 输入输出流, 流控制器 .. C++中抽象出来的对象,使用它来完成输入输出的功能.

      #+BEGIN_EXAMPLE
      这章没有什么好说的
      #+END_EXAMPLE
         
***** 使用字符串

      这个章节主要介绍的内容
      1. 变量 .. 变量是一个具有名称的对象.
      2. 对象 .. 是计算机中具有类型的一段内存空间.
      3. 对象和变量的主要区别 .. 对象可能没有名称!
      4. 接口 .. 对于某种类型的对象来说,接口就是可实现操作的集合.
      5. std::cin >> name 特性 .. 忽略输入前的所有 _空白符_ , 然后读取输入到变量, 碰到空白符或者EOF为止.
      6. 缓冲区 .. 库函数的实现中,缓冲区是很有必要的,在输入输出中,缓冲区的刷新是我们在乎的.
      7. 刷新缓冲区的关键:
         1) 缓冲区满了,系统自动刷新
         2) 请求从标准输入流中读数据
         3) 使用控制器明确刷新 类似 std:endl 与 回车
      8. 重载 .. 包括运算符和函数,变量和类不可能被重载,这很容易验证.
      9. const .. 修饰常量变量的关键字,就是变量的内容不能修改
      10. 成员函数 .. 类型对象拥有的接口操作.
      11. 字符直接量 .. 'a' 就是
      12. string对象重载的+号 .. 这个加号被string类重载了,可以和其他的字符串直接量通过+来连接.

      小结:
      C++中可以使用 wchar_t 承载宽字符,这样汉字就可以使用了.
      这章的关键在于两点:
      1. 刷新缓冲区的理解
      2. 变量和对象的区别

***** 循环和计数

     这章主要介绍的内容:
     1. 表达式中的元算符:
        1. 操作数的组合方式
        2. 操作数是怎样被转换成其他类型的
        3. 操作数的运算次序
     2. C++中的循环判断式 .. 和C不同,C++开发人员喜欢界定条件表达式为 xxx != yyy
     3. 类型size_t和string::size_type .. size_t是cstddef中定义的类型,可以保存任何对象的长度,string::size_type也是无符号整形,表示任何字符串的长度
     4. 半开区间 .. 为了代码看着更加直观,所以从0开始判断,并能直观的显示条件终止时,变量的值.
     5. 条件 .. 条件中的算数值会被转化成bool值,非零转化为true

      小结:
      这一章的重点在于:
      1. 操作数的优先级
      2. 类型的自动转换
      3. 条件表达式中的数值转换
      4. 容纳对象长度应该使用哪个类型去承载.
      
***** 使用顺序容器并分析字符串
      
      分割字符串:
      #+BEGIN_EXAMPLE
      string类,就可以想像成字符的容器.
      字符操作最好使用cctype提供的字符操作.
      
      #+END_EXAMPLE

      关于引用使用的一点思考:
      #+BEGIN_EXAMPLE
      引用一般使用的位置就是形参的传递,并且在函数中能够使用它修改指定对象的内容.
      函数可以返回引用,但是要知道的是,这个引用必须是外面传进来的,想想为什么?
      如果是内部的引用,出去了引用谁?答案就这么得到了.
      #+END_EXAMPLE

      关于指针和引用的一点思考:
      #+BEGIN_EXAMPLE
      引用是一个对象的别名,并不能嵌套,没有引用的引用!
      指针是存储一个对象的地址,但是指针本身是一个变量,它的值是可以改变的.
      指针可以嵌套,比如指针的指针,这很常见.
      但是引用相当与一个常指针,指针的内容不能改变,但是指针指向的内容就是对象,可以改变的.
      那么问题来了,我们是否能够获得引用的地址?并尝试修改它的内容?
      #+END_EXAMPLE
      
      我们来看一个例子:
      #+BEGIN_SRC c++
      #include <iostream>

      using namespace std;

      int main (){
        int a = 10;
        int b = 20;

        int& ai = a;
        int& *p = &ai; // Error. 没有引用的指针,这是规定.
        cout << *p << endl;

        p = (int*)(0x20000); //其实这些都是徒劳的,没有办法改变的.
        int** pp = &p; //这个也是一样的..
        pp = (int**)(0x100000);

        return 0;
      }
      #+END_SRC
      
      通过例子得到的解释:
      #+BEGIN_EXAMPLE
      其实很明显的知道,指针是一个变量!!!
      指针的值如果不加限定是可以改变的,这只是给我们提供一个修改对象的契机.
      指针可以获得地址,并且可以修改内容,但是不能修改地址!
      地址是物理化的内容,每个存储单元在硬件上都有固定的地址,哪怕是通过映射也是有自己的地址的,不能改变.
      #+END_EXAMPLE

      对于函数返回值的思考:
      #+BEGIN_EXAMPLE
      返回值的类型是函数声明或者定义时赋予的.
      返回值是有内存空间的,而且它的作用域并不是函数内,因为它是函数处理后生成的.
      返回值是匿名的对象,这就又说明了 变量和对象的区别!
      但是匿名对象是系统来管理的,如果返回值没有被使用,也不不会造成内存泄漏.
      返回值,也就是匿名对象是可以使用的,就像正常的变量一样,只不过需要配合函数来用.

      如:
      double a = func() [n];
      #+END_EXAMPLE

      编程过程中的总结条目:
      #+BEGIN_EXAMPLE
      一定要知道自己所在的维度,不论是什么语言都要注意.

      如:
      vector<vector<vector<string>>>  -- 四层哦!
      这里有很多曾,自己在使用的时候最好给一个好名字,不然会乱掉.
      #+END_EXAMPLE
      
      容器的常用方法:
      #+BEGIN_EXAMPLE
      container<T>::iterator
      container<T>::const_iterator
      container<T>::size_type
      
      c.begin()
      c.end()
      c.rbegin()
      c.rend()
      c.size()
      c.empty()
      c.insert(d,b,e)
      c.erase(it)
      c.erase(b,e)
      c.push_back(t)

      container<T> c;
      container<T> c(c2);
      container<T> c(n); 初始化的方式按照元素区分.
      container<T> c(n, t);
      container<T> c(begin, end); 区间内的元素用来初始化
      c = c2

      支持随机访问的容器才能使用的:
      c[n]

      迭代器常用的操作:
      *it
      it->x
      ++it;
      it--;
      b==e
      b!=e
      
      string类提供的比较特殊的操作:
      s.substr(i,j);
      getline(cin,s);
      s += s2; s += "fuck";
      
      vector类比较特殊的成员函数:
      使用他们挽救向量内存的分配,也就是预置的内存分配.
      v.reverse(n); 保留n个空间, 不会元素初始化,这个操作不会改变容器的大小,仅仅会影响insert和push_back的重复调用而分配内存的频率.
      v.resize(n); 就像你想象的那样,修改v到新的长度.

      list容器是为了高效地从任何位置插入和删除元素而别优化的,除了有vector的类似部分,还有
      list.sort()
      list.sort(cmp)

      <cctype> 提供的函数:
      isspace 判断空白字符
      isalpha 判断字母字符
      isdiagt 判断数字字符
      isalnum 判断字母或数字
      ispunct 判断标点符号
      isupper 判断大写
      islower 判断小写
      toupper 产生大写字母字符
      tolower 产生小写字母字符
      #+END_EXAMPLE


***** 使用顺序容器并分析字符串 

    如果你感觉对引用的概念很清晰,请看下面的例子:
    #+BEGIN_SRC c++
    static bool fgrade(Student_info& s){
      return grade(s) < 60 ;
    }

    vector<Student_info> extract_fail(vector<Student_info>& s){
      vector<Student_info> fail, pass;
      for (vector<Student_info>::size_type i=0; i<s.size(); ++i){
        if (fgrade(s[i]))
          fail.push_back(s[i]);
        else
          pass.push_back(s[i]);
      }
      s = pass;
      return fail;
    }
    #+END_SRC
    测试样例:
    #+BEGIN_SRC c++
    #include <iostream>
    int main (){
      int a = 10;
      int b = 20;
      int& ai = a;
      std::cout << ai << std::endl;
      ai = b;
      std::cout << ai << std::endl;
    }
    #+END_SRC

    向量容器的特点:
    #+BEGIN_EXAMPLE
    向量容器是为了快速存取而优化的.
    在向量结尾插入或者删除会很快.
    在其他地方加入或者删除会很慢.
    可以猜想,向量的索引速度快速,也是用了hash完成的,这些都是计算好的,为了快速读取使用的.
    #+END_EXAMPLE

    容器中的size成员函数通常是很快速的,可以经常使用,当然也要看情况.

    迭代器的概念
    #+BEGIN_EXAMPLE
    一个迭代器是一个值,其实本质就是一个指针

    它的作用:
    识别一个容器,并且能够识别容器中的一个元素
    让我们检查存储在容器中的值
    提供操作来移动在容器中的元素
    采用对应于容器所能够有效处理的方式来对可用的操作进行约束
    #+END_EXAMPLE

    一般索引的功能都可以使用迭代器来完成,如果有迭代器的话,当然C++中不推荐直接使用指针.

    iterator 和 const_iterator 一般是容器的成员,这个成员定义了一个类型而已.

    #+BEGIN_EXAMPLE
    C++中的基本准则:
    约束小的可以向约束强的类型转换,但是反过来就不可以.
    #+END_EXAMPLE

    作用于迭代器上的++操作,如 iter++ ,都是类中实现的重载运算,真正的元素可能并不挨着.

    #+BEGIN_EXAMPLE
    Note: . 的优先级比 * 要高
    (*iter).name 等价于 iter->name
    #+END_EXAMPLE

    #+BEGIN_EXAMPLE
    迭代器本质虽然是指针,但是通过C++语言的包装修饰,变得有很多类型,并且需要注意他们的操作.
    如果容器中的迭代器不支持随机访问,那么就不能使用随机迭代器,但是顺序迭代器通过重载后是可以使用的.
    我们没有必要为他们重载,因为他们的实现就是为了某方面的特殊功能.
    #+END_EXAMPLE

    list容器:
    #+BEGIN_EXAMPLE
    vector容器是为了随机访问而优化的,其实是类似数组的实现.
    如果在容器中随机访问并操作元素或者顺序访问容器,那vector会比list快很多.
    但是当大量的随机删除和插入操作被使用到容器时,list的速度明显会比vector快.(不在尾部)
    list支持几乎所有的vector操作,但是不支持索引操作.
    不用想也知道,vector和list的成员函数的实现是不同的.
    #+END_EXAMPLE

    一些关于vector和list的思考
    #+BEGIN_EXAMPLE
    就删除操作而言,他们的实现机制是有很大差别的:
    list是链表,只是断开重连,其他迭代器的值是不会变化的.
    vector是类似数组的容器,如果对他进行删除,那么删除元素后面的迭代器都无效了,这个是重新分配的.
    所以,使用vector删除操作要小心迭代器的副本,可能根本不是我们想要的元素.

    因为list并不支持完全的随机访问,也就是iter+n这样的操作不支持,所以不能使用std::sort函数.
    目前支持sort的类型有 vector 和 string
    但是,list提供了面向自己成员的成员函数sort,也可以满足我们遇到的问题.
    #+END_EXAMPLE

***** 使用库算法

     如果使用库算法,那么头文件algorithm就是必须的!

     对于迭代器适配器的思考:
     #+BEGIN_EXAMPLE
     
     #+END_EXAMPLE

     C++中,static关键字的思考:
     #+BEGIN_EXAMPLE
     在类类型外面使用的static和C语言的基本一致.
     在类中使用的static是表示类所有方法或者成员,是类共有的.
     #+END_EXAMPLE

     对回调函数传递参数的思考:
     #+BEGIN_EXAMPLE
     首先回调函数的实现是通过C语言的函数的指针来完成的.
     一般使用函数指针作为参数来实现运行时链接.
     不过c++有重载的特点,所以回调有比C更强大的特性.
     
     调用回调函数的函数,声明的时候就要指定回调函数的指针类型.
     实际调用的使用只传入指针.
     回调函数的参数是在调用回调函数的函数中实现传递的,这个参数也是该函数的参数中衍生的.
     在find_if中,将b到e的迭代器挨个传递给p,迭代器指向的类型和p的参数是一样的,这是实现的规定,
     当然在库中使用的是模板完成的.

     如:
      bool (*p)(char c);
      find_if(b , e , p);
      template< class InputIt, class UnaryPredicate >
      InputIt find_if( InputIt first, InputIt last,
                      UnaryPredicate p );

      template<class InputIt, class UnaryPredicate>
      InputIt find_if(InputIt first, InputIt last, UnaryPredicate p)
      {
          for (; first != last; ++first) {
              if (p(*first)) { //看这里的实现!
                  return first;
              }
          }
          return last;
      }
     #+END_EXAMPLE

     对逻辑流程的层级思考:
     #+BEGIN_EXAMPLE
     一般设计程序之初要对自己的程序有一个层级的概念.
     哪一个层应该干什么,有什么工具可以使用,是否能实现都是要考虑到的.
     设计代码的时候,专注的完成该层的实现
     #+END_EXAMPLE

     关于指针的下标解引用思考:
     #+BEGIN_EXAMPLE
     在C语言中下标和解引用是一样的概念,不过这里的引用不是c++里面的引用,还是有一些差别.
     如果使用指针的话,最好使用同一种风格的编码方式,如:
     
     string s = "hello";
     string* p = &s 或者 string::iterator p = s.begin();
     
     p[n] 等价于 *(p + n)
     p[s.size()] 等价于 *(p + s.size())
     #+END_EXAMPLE

     void类型的思考:
     #+BEGIN_EXAMPLE
     返回值,和参数中使用
     void func(void);
     表示没有返回值,没有参数传递.

     void类型可以承载其他的类型.
     char* jim = "HH";
     void* name = jim;

     void类型可以强转为任意其他类型.
     void* temp = &a;
     int * b = (int *) temp;
     #+END_EXAMPLE

     常用的库算法:(下面是书中使用的算法)
     #+BEGIN_EXAMPLE
     find(b, e, val)
     find_if(b, e, p)
     search(b, e, b2, e2)
     copy(b, e, d)
     remove_copy(b, e, t, val)
     remove_copy_if(b, e, t, p)
     remove_if(b, e, p) //原数组排序.
     remove(b, e, val)
     transform(b, e, t, f)
     partition(b, e, p)
     stable_partition(b, e, p) //顺序不变.
     #+END_EXAMPLE

***** 使用关联容器

      关联容器,也叫关联数组,并不是C++内置的,而是标准库实现的.

      常用的关联数组就是map,所在头文件是<map>.

      关联数组是键值对.

      关联数组的键不一定是整数,可以是任何可以比较的类型.

      关联数组的排序是自动的,不能人为干涉.

      关联数组和hash算法有关.
      C++的关联数组使用的是'自平衡调节树'实现的.性能还不错.只是比最好的散列表结构稍慢.

      关联数组的元素是pair类型. pair<const K,V>

      使用关联数据就像其他语言一样,如果没有这个键,就会自动创建一个,并初始化它的值为空.

      使用模板嵌套的时候注意:  
      #+BEGIN_EXAMPLE
      map<string, vector<int> > mm = xref(cin, split_v2);
      这里的> > 要分开写!
      #+END_EXAMPLE

      循环输出的注意事项:
      #+BEGIN_EXAMPLE
      循环输出是代码中常见的内容,如果按照某个格式输出,可能要使用,或者:这样的字符隔开.
      可以使用第一个元素特殊处理,或者最后一个元素特殊处理.
      以后都使用第一个元素特殊处理:
      #+END_EXAMPLE
      如:
      #+BEGIN_SRC c++
      for (map<string, vector<int> >::iterator it = mm.begin();
           it != mm.end();
           ++it){
        cout << setw(10) << it->first ;
        vector<int>::iterator iter = it->second.begin();
        cout << ":" << *iter;
        ++iter;
        while (iter != it->second.end()){
          cout << "," << *iter;
          ++iter;
        }
        cout << endl;
      }
      #+END_SRC

      当类型名字比较长,或者嵌套类型比较多的时候,使用typedef是个不错的选择.
      并且使用typedef可以解决map<string, vector<int> >这样的困扰.

      对<cstdlib>中的rand()函数的思考:
      rand()生成范围: [0,RAND_MAX)
      #+BEGIN_EXAMPLE
      rand()%n这个往往不能解决问题:
      特例1.
      当n是小整数的时候,n取2时,只有0和1可以选,产生的余数并不是绝对随机的.
      特例2.
      当n取20000时,10000%n 和 30000%n的结果是相同的,那概率是15000/n的两倍!

      应该使用: 目的,产生一个[0,n)之间的随机数
      使用这样的方法解决上面两种问题:

      srand(time(0)) //这里很重要,需要这个随机数发生器才能产生随机数.
      int backetsize = rand() / n;
      int r ;
      do r = rand() / backetsize;
      while (r >= n);
      return r;
      
      Note:根本没有使用%取余操作
      
      #+END_EXAMPLE
      
           
**** 第二部分 定义属于自己的抽象

     : 由于第二部分的内容比较抽象,并不能简单描述,所以采用问答论述完成记录.

***** 编写泛型函数

      迭代器的相关思考:
      #+BEGIN_EXAMPLE
      迭代器不是C++语言的一部分,是标准库抽象的一部分.
      迭代器是一个实例化的类型,这个类型是迭代器模板.
      C++标准库抽象了5种类型的迭代器.
      #+END_EXAMPLE

      std::sort函数的使用注意:
      #+BEGIN_EXAMPLE
      目前所接触的标准库中只有 vector和string支持.
      #+END_EXAMPLE

      所有标准库容器都满足正向迭代器的要求.
      所有标准库容器都满足双向迭代器的要求.
      通常我们不需要考虑输入和输出迭代器,除非自己实现某些功能.

      为什么要有输入和输出迭代器:
      #+BEGIN_EXAMPLE
      原因在于,并不是所有迭代器都和容器关联的.
      例子:
      如果一个容器满足push_back,那么它也会满足back_inserter操作.
      这个back_inserter操作就是一个输出迭代器,就是可以向他输出,但不支持其他迭代器的功能.
      #+END_EXAMPLE

      关于随机访问迭代器的思考:
      #+BEGIN_EXAMPLE
      list容器并不支持随机访问,查看它的内容只能遍历,因为它是链表的形式实现的.
      随机访问的概念是可以实现在固定域内,如一个数组中,大幅度的跳转,如p+n这样.
      #+END_EXAMPLE

      流迭代器定义在<iterator>中,这里面还有很多迭代器适配器.
      输入流迭代器的使用:
      #+BEGIN_EXAMPLE
      vector<int> v;
      copy(istream_iterator<int>(cin), istream_iterator<int>(), back_inserter(v));
      istream_iterator<int>() // 是文件末尾或者是处于错误的时候,可以和这个缺省值相等.
      这里流迭代器是一个模板,需要指定流关联到哪个输入类型.
      #+END_EXAMPLE

      输出流迭代器的使用:
      #+BEGIN_EXAMPLE
      copy(v.begin(), v.end(), ostream_iterator<int>(cout, " ");
      #+END_EXAMPLE

      迭代器使用的例子:
      #+BEGIN_SRC c++
      for (vector<int>::iterator it = v.begin(); it != v.end(); ++it)
      for (vector<int>::iterator it(v.begin()); it != v.end(); ++it)
      #+END_SRC

      C++输入输出操作是带类型的操作!
      #+BEGIN_EXAMPLE
      getline(cin, s);
      cin >> final >> midterm >> name >> endl;
      这些类型是自动改变的.
      #+END_EXAMPLE
      所以C++的流迭代器是模板.

      输入输出流使用模板迭代器的例子:
      #+BEGIN_SRC c++
      #include <iostream>
      #include <vector>
      #include <iterator>
      #include <algorithm>
      using namespace std;

      int main (int argc, char** argv){

        vector<string> s;
        string temp;

        copy(istream_iterator<string>(cin),
             istream_iterator<string>(),
             back_inserter(s));
        copy(s.begin(), s.end(), ostream_iterator<string>(cout, ","));
        cout << endl;

        return 0;
      }
      #+END_SRC

      以后的代码应该使用迭代器提高适应性.
      思考,C++提供什么方法提高了代码的灵活性?
      1. 模板,毋庸置疑, 模板函数,模板类.
      2. 迭代器,(其实也是模板)
      3. 重载,根据参数类型不同划分,不能用于回调.
      4. 多肽,虚拟函数,指针,析构函数共同作用.
      5. 继承,多重继承,避免重复的写类,并且扩展变容易.

      模板函数的定义和声明:
      template <class T> T func(const T& s);
      template <class T> T func(const T& s){}

      使用有返回值的模板函数:
      double x = func<double>((double)m); // 明确的提供模板函数返回值的类型!

      typename是在定义模板时使用模板类型中的类型,需要使用它声明!

      类型匹配是编程语言的一种美学,这种对账的接口可以很好的使我们考虑问题.
      
***** 第九章 定义新类型
      
     在类内部调用同名的外部函数
     #+BEGIN_SRC c++
      #include <iostream>
      #include <string>
      using namespace std;
      string printfm(string& name){
        return name;
      }

      class Student_info{
      public:
        string printfm(){
          return ::printfm(n); // 应该这样使用!
        }
        string name(){
          return n;
        }
        void set_name(string& s){
          n = s;
        }
      private:
        string n;
      };
     #+END_SRC

     在C++中,初始化一个对象时,最好明确初始化内部类型,否则该变量可能存储的是之前内存中的无用信息.
     这很重要,因为自定义类型可以递归的调用构造,默认就可以,但是内部类型最好自己指定初始值.

     类型调用构造函数初始化的时候,和正常的函数流程相似,如果有标准输入输出也是会有相应的动作.
     #+BEGIN_SRC c++
     class Student_info{
     public:
        Student_info(){}
        Student_info(istream& in){read(in);}// 这里触发读取标准输入
        string printfm(){
          return ::printfm(n);
        }
        string name(){
          return n;
        }
        void set_name(string& s){
          n = s;
        }
        istream& read(istream& in){
          in >> n ;
          return in;
        }
      private:
        string n;
      };
     #+END_SRC 

     在c++中的struct和class的使用:
     #+BEGIN_EXAMPLE
     他们的差别仅仅在于第一个标号前面的内容是否是private的.(class就是private)
     使用他们的方面:
     1. 在对外开放的,如C语言中的struct一样,公用的结构可以使用它定义,一般也不给方法.
     2. 如果是保护的,受限制的类型,需要使用class来定义.
     这是不成文的规定.
     #+END_EXAMPLE

***** 使类对象像一个数值一样工作
      
* Cpp编程常用札记

** 常用头文件
   
   - iostream :: 常用的输入输出操作内容
   - string :: 常用的字符串操作, getline函数是这个里面的
   - iomanip :: 目前使用的setprecision(n)函数是这里面的
   - algorithm :: 常用的算法都在这个头文件中
   - ios :: streamsize这个类型定义在这个头文件中
   - vector :: 这个是向量容器的头文件
   - list :: 这个是链表容器的头文件
   - map :: 这个是关联容器的头文件
   - stdexcept :: 这个是异常相关的头文件
   - fstream :: 这个头文件定义了ifstream和ofstream这样的,常与文件相关的流类型.
   - memory :: 与C++动态分配内存相关的方法类在这里,如allocator
   - 以C打头的头文件 :: 一般是C++实现兼容C功能的头文件  
     + cctype :: 处理字符数据提供有用的函数 如:isspace isalpha isdigit etc..
     + cstddef :: 类似size_t,ptrdiff_t这种无符号类型定义在这里

** C/C++相关网站推荐

   : 国人对C++的支持还是很好的,下面的网站有很多中文版本.
   : 如果想要学习英语,潜移默化的提高能力,使用英文版本是一个不错的选择.

*** c/cpp标准库在线查询网站,这个很有用,如果你经常用到的话:
   http://en.cppreference.com/w/
   http://zh.cppreference.com/w/

*** 上面链接的具体部分,是search库的face:
   http://en.cppreference.com/mwiki/index.php?title=Special%3ASearch&search
   http://zh.cppreference.com/mwiki/index.php?title=Special%3A%E6%90%9C%E7%B4%A2&search

*** 标准库离线版本下载地址:
   http://en.cppreference.com/w/Cppreference:Archives
   http://zh.cppreference.com/w/Cppreference:Archives

*** C++官网

   : 这个里面有最新的信息,还有论坛,注册后可以有更好支持哦
   http://www.cplusplus.com/

** C++11提供的扩展

   To be continued...
