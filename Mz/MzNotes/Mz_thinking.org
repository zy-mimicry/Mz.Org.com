#+TITLE: 思想的深度

** Description: 解决问题!
   
   : 这里主要讲述的是,解决问题的哲学方法

*** 怎么提高解决问题的能力
    
    解决问题是一种思维方式,就是一种分析思路.
    
    如果想要提高就按照这个思考每一个问题:
    1. 这个问题的环境是什么?
    2. 根据环境多方面考虑资源.
    3. 根据手头的资源,确定一个或多个解决问题的思路
    4. 按照自己的思路完成推理与验证,如果不行,再换一个思路马上验证.
    
** Question: 作为一个程序员如何看待算法的学习和使用?

*** Answer: 最好的方法, 是用到哪个方面的知识就去学那方面的算法,并且在热度还没有降下来的时候,练习到足以背下来.

    为什么不系统的学习? 别人不是都说算法是程序的灵魂么?

    如果有时间可以这样,但是并不是每个人都有时间,谁年轻的时候就有正事,天天学习看书看算法?

    算法是程序的灵魂没有错,但是并不是要学习所有算法,毕竟如果你学习linux内核,那学习神经网络的算法有意义么?

    每个人的生活是不同的,我们要选择适合自己的学习方式.

    算法是伴随程序员一生的,其实其他行业也是这样的,就上面的话题发表自己的看法:

    1. 首先,学习算法是一辈子要做的事情,人类的智慧是需要理解和消化的,不可能一蹴而就,反正我不是天才.
    2. 工作和学习中用到什么算法就去学习,这是关键的点,并且也是当前对自己很有用的,如果可以掌握就马上掌握.
    3. 不要系统的学习算法,那是没有意义的,只会算法也不能解决所有问题,在计算机行业,逻辑的清晰和推理比算法更有用.
    4. 到最后一定会发现,在你工作和感兴趣的领域,算法种类可能就是那么多.

** Question: 解决问题与设计程序的思维方法

*** Answer: 需要不断的磨练才可以获得,但是需要一个理性的思路支撑.

    1. 当解决问题的时候,需要将复杂的问题拆解成为简单的问题,然后逐个解析.
    2. 当设计一个程序的时候需要考虑多方面因素,所以需要将简单的问题复杂化,尽可能的多想,后期的兼容和维护工作就会很容易.

** Qusetion: 掌握一门技术的学习方法

*** Answer: 这方面需要自己在工作和学习中体会,下面是本人的看法.

    掌握一门技术的具体方法:
    1. 如果是学习给定好的具体的架构,如android,linux等,那么方法是:
       - 看相关的书籍或者文档,关注需要的章节,然后精读
       - 趁热打铁,对于所学到的东西总结,并马上用到工程项目中
       - 尽可能多的想到设计中的点,然后添加代码验证
       - 当上述步骤过后,会对架构有一定的了解,这时候使用架构来编写基于该架构的代码
       - 至于创新就是之后的事情了
    2. 如果是学习语言类知识.那么方法是:
       - 查看语言的书籍或这文档
       - 熟练的刷课后习题,如果可能的话给出不同的解决方案
       - 小有所成之后在github上follow别人的项目,然后尽量作出贡献.
       - 在平常练习代码中,尽量写可移植的,可复用的的代码
       - 建立自己的代码库


    : 总结一下,前面所说的内容其实就是需要思考验证架构的方法,全面的考虑验证架构的方法.对于语言的学习除了多想语言的特有设计方法,就是多练,甚至是背代码也是可以的.

** D: Email设置方法(于工作中)

*** T: 邮件相关的配置一般很少有人关注,只要能用就可以了,几乎是其他人如IT给你配置好的,但当依靠不了别人的时候,就会成为问题.

    : 邮件协议内容简介

    待完善...

    公司邮箱简单配置
    1. 使用工具thunderbird
    2. 首选项-> 账户设置 -> 帐号操作 -> 添加邮件账户
    3. 名字: hello-email 电子有点地址: hello@gmial.com 密码: xxxxxx
    4. IMAP服务器设置: [mailsz.tct.tcl.com.cn] port: [142]+1
    5. 用户名:(这是在内部服务器注册的可用账户名) [TCT-HQ]\hello-email
    6. 链接安全检测无.验证方式是普通就可以.
    7. SMTP服务器设置: [mailsz.tct.tcl.com.cn] port: [24]+1
    8. 用户名:(这个也是在内部服务器中注册的账户) [TCT-HQ]\hello-email
    9. All Right.
    
