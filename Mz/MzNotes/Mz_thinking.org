#+TITLE: 思想的深度

** Description: 解决问题!
   
   : 这里主要讲述的是,解决问题的哲学方法

*** 怎么提高解决问题的能力
    
    解决问题是一种思维方式,就是一种分析思路.
    
    如果想要提高就按照这个思考每一个问题:
    1. 这个问题的环境是什么?
    2. 根据环境多方面考虑资源.
    3. 根据手头的资源,确定一个或多个解决问题的思路
    4. 按照自己的思路完成推理与验证,如果不行,再换一个思路马上验证.

** Description: 需要练就的技能!

*** Thinking: 这里就列举一些需要练就的编程技能

    遇到问题并不慌张,可以冷静的分析问题,找到切入的方法.
    
    当别人在旁边的时候,可以正常的处理逻辑,不被其他人打扰.

    在编写自己熟悉的代码的时候可以一气呵成,当然如何没有错误是最好的,如果有也不要担心,多做练习.

** Question: 作为一个程序员如何看待算法的学习和使用?

*** Answer: 最好的方法, 是用到哪个方面的知识就去学那方面的算法,并且在热度还没有降下来的时候,练习到足以背下来.

    为什么不系统的学习? 别人不是都说算法是程序的灵魂么?

    如果有时间可以这样,但是并不是每个人都有时间,谁年轻的时候就有正事,天天学习看书看算法?

    算法是程序的灵魂没有错,但是并不是要学习所有算法,毕竟如果你学习linux内核,那学习神经网络的算法有意义么?

    每个人的生活是不同的,我们要选择适合自己的学习方式.

    算法是伴随程序员一生的,其实其他行业也是这样的,就上面的话题发表自己的看法:

    1. 首先,学习算法是一辈子要做的事情,人类的智慧是需要理解和消化的,不可能一蹴而就,反正我不是天才.
    2. 工作和学习中用到什么算法就去学习,这是关键的点,并且也是当前对自己很有用的,如果可以掌握就马上掌握.
    3. 不要系统的学习算法,那是没有意义的,只会算法也不能解决所有问题,在计算机行业,逻辑的清晰和推理比算法更有用.
    4. 到最后一定会发现,在你工作和感兴趣的领域,算法种类可能就是那么多.

** Question: 解决问题与设计程序的思维方法

*** Answer: 需要不断的磨练才可以获得,但是需要一个理性的思路支撑.

    1. 当解决问题的时候,需要将复杂的问题拆解成为简单的问题,然后逐个解析.
    2. 当设计一个程序的时候需要考虑多方面因素,所以需要将简单的问题复杂化,尽可能的多想,后期的兼容和维护工作就会很容易.

** Qusetion: 掌握一门技术的学习方法

*** Answer: 这方面需要自己在工作和学习中体会,下面是本人的看法.

    掌握一门技术的具体方法:
    1. 如果是学习给定好的具体的架构,如android,linux等,那么方法是:
       - 看相关的书籍或者文档,关注需要的章节,然后精读
       - 趁热打铁,对于所学到的东西总结,并马上用到工程项目中
       - 尽可能多的想到设计中的点,然后添加代码验证
       - 当上述步骤过后,会对架构有一定的了解,这时候使用架构来编写基于该架构的代码
       - 至于创新就是之后的事情了
    2. 如果是学习语言类知识.那么方法是:
       - 查看语言的书籍或文档
       - 熟练的刷课后习题,如果可能的话给出不同的解决方案
       - 小有所成之后在github上follow别人的项目,然后尽量作出贡献.
       - 在平常练习代码中,尽量写可移植的,可复用的的代码
       - 建立自己的代码库

    : 总结一下,前面所说的内容其实就是需要思考验证架构的方法,全面的考虑验证架构的方法.对于语言的学习除了多想语言的特有设计方法,就是多练,甚至是背代码也是可以的.

** Question: 如何切入像linux内核这样的项目系统架构

*** Answer: 以linux内核为例,抒发一些自己对问题的思考.

    刚接触内核这么大的源码架构,找到切入口是一个关键点.
    一般熟悉大项目的思维就是从程序或者系统的开始到完成的流程看,这个过程就包含了系统的框架.
    
    方法不多说就是查看书籍,文档等一些资料先熟悉一下架构知识.
    然后根据自己的理解去看代码,以辨证的方法再调整自己的误解,并通过验证加深自己的正确理解.

** Question: 解决问题的思考方式

*** Answer: 一般对于软件开发来看,如果你有良好的思考解决问题的方式(这个可能要有一定的经验基础),那么解决问题并不是难事,而是丰富自己知识的好事.

    一般问提的思考方式是需要工作和学习中解决或者总结问题来摸索的,并不能一蹴而就,但基本的思路要有.

    如,给你一个log确定问题的点在哪里.
    1. 并不是哪里有错误log就去看,这也是普遍工程师没有的技能,这需要一定的基础来分析log,具体在哪里
    2. 当然,开始的时候可能没有经验,但是,问题就在那里,有log的话,那错误的方向通过log可以确定几个,然后去挨个分析,谁让自己没接触过呢...
    3. 分析完没有接触过的问题,一定要反思,并形成知识积累,对问题的架构最好梳理一下,一定会有用的.

    4. 最重要的是,前期自己不犀利的时候,一定要多看源码架构,对于提高自信和底气有很大的帮助,本来如果就是那样,也就没有别人敢反驳你.


** Question: 学东西的目的性与时间的付出

*** Answer: 学习东西需要找对方向,并且需要下工夫,并没有捷径.

    这里要说明方向问题,因为现在IT行业的知识很多,并没有时间挥霍去学习用不上的东西,就算学习了,不用也是会忘记的.

    学习一门知识之前,一定要考虑清楚,是否有必要,大概归纳的考虑方向
    1. 和当前的工作或者生活是否关系紧密!
    2. 学习这些知识是否可以用的上,并且能够经常使用.
    3. 学习的知识最好是通用的技能,不能切换平台就不好使了.
    4. 学习的方法与切入途径前面已经提到,也是需要考虑的范围.

    : 如果一旦决定好了,那就开始动手学习,这是没有捷径的!
